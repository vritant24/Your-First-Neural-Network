# yaml-language-server: $schema=https://vscodeedu.com/assets/schema/course-v2.schema.json
id: course1
title: Your First Neural Network
level: beginner
description: Learn how to build a neural network from scratch without using any libraries
cardImageUrl: https://vscodeedu.com/assets/course-cards/card6.png
contacts:
  - displayName: Vritant Bhardwaj
    pictureUrl: https://avatars.githubusercontent.com/u/13074644?v=4
    homePageUrl: https://github.com/vritant24
files:
  - path: course1/unit1/lesson2/lessonpart1/exponents.py
    content: "# add your code here"
  - path: course1/unit1/lesson3/lessonpart2/build2.py
    content: "class NeuralNetwork():\r

      \    def __init__(self):\r

      \        print(\"initialized class\")"
  - path: course1/unit1/lesson3/lessonpart3/build3.py
    content: "from math import exp\r

      \r

      class NeuralNetwork():\r

      \    def __init__(self):\r

      \        print(\"initialized class\")\r

      \    \r

      \    def __sigmoid(self, x):\r

      \        return 1 / (1 + exp(-x))"
  - path: course1/unit1/lesson3/lessonpart4/build4.py
    content: "from math import exp\r

      \r

      class NeuralNetwork():\r

      \    def __init__(self):\r

      \        print(\"initialized class\")\r

      \    \r

      \    def __sigmoid(self, x):\r

      \        return 1 / (1 + exp(-x))\r

      \    \r

      \    def __sigmoid_derivative(self, x):\r

      \        return x * (1 - x)\r

      \r

      \    "
  - path: course1/unit1/lesson3/lessonpart5/build5.py
    content: "import random\r

      from math import exp\r

      \r

      class NeuralNetwork():\r

      \    def __init__(self):\r

      \        print(\"initialized class\")\r

      \        self.synaptic_weights = 2 * random.random((3, 1)) - 1\r

      \    \r

      \    def __sigmoid(self, x):\r

      \        return 1 / (1 + exp(-x))\r

      \    \r

      \    def __sigmoid_derivative(self, x):\r

      \        return x * (1 - x)\r

      \r

      \    def dot(self, a, b):\r

      \        # Ensure the matrices can be multiplied\r

      \        if len(a) != len(b):\r

      \            raise ValueError(\"Matrices cannot be multiplied\")\r

      \r

      \        # Initialize the result matrix with zeros\r

      \        result = [[0 for _ in range(len(b))] for _ in range(len(a))]\r

      \r

      \        # Perform matrix multiplication\r

      \        for i in range(len(a)):\r

      \            for j in range(len(b)):\r

      \                for k in range(len(b)):\r

      \                    result[i][j] += a[i][k] * b[k][j]\r

      \r

      \        return result\r

      \    \r

      \    def think(self, inputs):\r

      \        return self.__sigmoid(self.dot(inputs, self.synaptic_weights))\r

      \r

      \    "
  - path: course1/unit1/lesson3/lessonpart6/build5.py
    content: "from math import exp\r

      \r

      class NeuralNetwork():\r

      \    def __init__(self):\r

      \        print(\"initialized class\")\r

      \r

      \    def __sigmoid(self, x):\r

      \        return 1 / (1 + exp(-x))\r

      \    \r

      \    def __sigmoid_derivative(self, x):\r

      \        return x * (1 - x)\r

      \r

      \    def dot(self, a, b):\r

      \        # Ensure the matrices can be multiplied\r

      \        if len(a) != len(b):\r

      \            raise ValueError(\"Matrices cannot be multiplied\")\r

      \r

      \        # Initialize the result matrix with zeros\r

      \        result = [[0 for _ in range(len(b))] for _ in range(len(a))]\r

      \r

      \        # Perform matrix multiplication\r

      \        for i in range(len(a)):\r

      \            for j in range(len(b)):\r

      \                for k in range(len(b)):\r

      \                    result[i][j] += a[i][k] * b[k][j]\r

      \r

      \        return result\r

      \    "
  - path: course1/unit1/lesson3/lessonpart7/final.py
    content: "import random\r

      from math import exp\r

      \r

      class NeuralNetwork():\r

      \    def __init__(self):\r

      \        print(\"initialized class\")\r

      \        self.synaptic_weights = 2 * random.random((3, 1)) - 1\r

      \    \r

      \    def __sigmoid(self, x):\r

      \        return 1 / (1 + exp(-x))\r

      \    \r

      \    def __sigmoid_derivative(self, x):\r

      \        return x * (1 - x)\r

      \r

      \    def dot(self, a, b):\r

      \        # Ensure the matrices can be multiplied\r

      \        if len(a) != len(b):\r

      \            raise ValueError(\"Matrices cannot be multiplied\")\r

      \r

      \        # Initialize the result matrix with zeros\r

      \        result = [[0 for _ in range(len(b))] for _ in range(len(a))]\r

      \r

      \        # Perform matrix multiplication\r

      \        for i in range(len(a)):\r

      \            for j in range(len(b)):\r

      \                for k in range(len(b)):\r

      \                    result[i][j] += a[i][k] * b[k][j]\r

      \r

      \        return result\r

      \    \r

      \    def think(self, inputs):\r

      \        return self.__sigmoid(self.dot(inputs, self.synaptic_weights))\r

      \    \r

      \    def train(self, training_set_inputs, training_set_outputs,
      number_of_training_iterations):\r

      \        for iteration in range(number_of_training_iterations):\r

      \            output = self.think(training_set_inputs)\r

      \            error = [[training_set_outputs[i] - output[i]] for i in
      range(len(training_set_outputs))]\r

      \            adjustment = self.dot(self.transpose(training_set_inputs),
      self.multiply(error, self.__sigmoid_derivative(output)))\r

      \            self.synaptic_weights = [[self.synaptic_weights[i] +
      adjustment[i]] for i in range(len(self.synaptic_weights))]\r

      \r

      \    "
  - path: course1/unit1/lesson4/lessonpart1/NeuralNetwork.py
    content: "import random\r

      from math import exp\r

      \r

      class NeuralNetwork():\r

      \    def __init__(self):\r

      \        random.seed(1)\r

      \        self.synaptic_weights = [[2 * random.random() - 1] for _ in
      range(3)]\r

      \r

      \    def __sigmoid(self, x):\r

      \        return 1 / (1 + exp(-x))\r

      \r

      \    def __sigmoid_derivative(self, x):\r

      \        return x * (1 - x)\r

      \r

      \    def train(self, training_set_inputs, training_set_outputs,
      number_of_training_iterations):\r

      \        for iteration in range(number_of_training_iterations):\r

      \            output = self.think(training_set_inputs)\r

      \            error = [[training_set_outputs[i] - output[i]] for i in
      range(len(training_set_outputs))]\r

      \            adjustment = self.dot(self.transpose(training_set_inputs),
      self.multiply(error, self.__sigmoid_derivative(output)))\r

      \            self.synaptic_weights = [[self.synaptic_weights[i] +
      adjustment[i]] for i in range(len(self.synaptic_weights))]\r

      \r

      \    def think(self, inputs):\r

      \        return [[self.__sigmoid(sum([inputs[i][j] *
      self.synaptic_weights[j] for j in range(len(inputs))]))] for i in
      range(len(inputs))]\r

      \r

      \    def dot(self, a, b):\r

      \        result = [[0 for _ in range(len(b))] for _ in range(len(a))]\r

      \        for i in range(len(a)):\r

      \            for j in range(len(b)):\r

      \                for k in range(len(b)):\r

      \                    result[i][j] += a[i][k] * b[k][j]\r

      \        return result\r

      \r

      \    def transpose(self, matrix):\r

      \        return [[matrix[j][i] for j in range(len(matrix))] for i in
      range(len(matrix))]\r

      \r

      \    def multiply(self, a, b):\r

      \        return [[a[i][j] * b[i][j] for j in range(len(a))] for i in
      range(len(a))]\r

      \r

      if __name__ == \"__main__\":\r

      \r

      \    # Initialize a single neuron neural network.\r

      \    neural_network = NeuralNetwork()\r

      \r

      \    print(\"Random starting synaptic weights: \")\r

      \    print(neural_network.synaptic_weights)\r

      \r

      \    # The training set. We have 4 examples, each consisting of 3 input
      values\r

      \    # and 1 output value.\r

      \    training_set_inputs = [[0, 0, 1], [1, 1, 1], [1, 0, 1], [0, 1, 1]]\r

      \    training_set_outputs = [,,,]\r

      \r

      \    # Train the neural network using a training set.\r

      \    # Do it 10,000 times and make small adjustments each time.\r

      \    neural_network.train(training_set_inputs, training_set_outputs,
      10000)\r

      \r

      \    print(\"New synaptic weights after training: \")\r

      \    print(neural_network.synaptic_weights)\r

      \r

      \    # Test the neural network with a new situation.\r

      \    print(\"Considering new situation [1, 0, 0] -> ?: \")\r

      \    print(neural_network.think([[1, 0, 0]]))"
units:
  - unit1/index.yml
